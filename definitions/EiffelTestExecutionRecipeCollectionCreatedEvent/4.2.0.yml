# Copyright 2017-2023 Ericsson AB and others.
# For a full list of individual contributors, please see the commit history.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
$schema: http://json-schema.org/draft-04/schema#
_abbrev: TERCC
_description: |-
  The EiffelTestExecutionRecipeCollectionCreatedEvent declares that a collection of test execution recipes has been created. In order to clarify what that means, several concepts need to be explained.

  Just as Eiffel is an opinionated protocol, EiffelTestExecutionRecipeCollectionCreatedEvent is an opinionated event, and to a certain extent that opinion goes against the grain of traditional test management. This event assumes that activity configurations and test scope definitions are two separate things. To exemplify, when one's CI server triggers the Acceptance Test activity in the pipeline, there is nothing in that activity that says which tests to execute where or with what parameters: that is a separate concern. Instead, it will query a test selection service for that information. This information is encapsulated by the EiffelTestExecutionRecipeCollectionCreatedEvent, which contains all the information needed to configure and execute the tests.

  How the test selection service generates the recipe collection is, from the point of view of the Eiffel protocol, irrelevant. It may very well be from a statically defined list of test cases, or from an elaborate test selection algorithm weighing together a host of factors to determine the optimal set of test cases to execute at any particular time, or a combination of the two.

  The __data__ object consists of two main parts. __data.selectionStrategy__ identifies the strategy used to select the test cases and generate the recipe collection, while __data.batches__ or __data.batchesUri__ contain or reference, respectively, the recipes. The recipes are grouped in batches, which are used to control the order of execution of test cases. Every batch has a priority to let the test executor order them in sequence, but within each batch no assumptions are made as to the execution order the test cases. This way the recipe collection can either allow the executor a high degree of freedom in scheduling the test executions, and/or prescribe the exact sequential order in which they must be executed. Each event SHALL include one and only one of __data.batches__ and __data.batchesUri__.

  Finally, each recipe (__data.batches.recipes__) consists of two parts: the test case to execute, and the constraints of that execution. The EiffelTestExecutionRecipeCollectionCreatedEvent does not control the syntax of these constraints, as the nature of such constraints are highly dependent on technology domain and test execution framework. That being said, there are three questions that typically need to be answered: what is the item under test, in what kind of environment is it to be tested, and what are the test parameters? Note the distinction between test case and test execution: it is perfectly legal for a single test case to appear multiple times within the same EiffelTestExecutionRecipeCollectionCreatedEvent, but (presumably) with different constraints.
type: object
properties:
  meta:
    $ref: ../EiffelMetaProperty/3.0.0.yml
  data:
    type: object
    properties:
      selectionStrategy:
        _description: The strategy used to select the test cases and
          generate the recipe collection.
        type: object
        properties:
          tracker:
            _description: The name of the selection strategy that generated
              the test execution recipe collection.
            type: string
          id:
            _description: The unique identity of the selection strategy
              that generated the test execution recipe collection.
            type: string
          uri:
            _description: The URI at which the the selection strategy
              that generated the test execution recipe collection can
              be retrieved.
            type: string
        required:
          - id
        additionalProperties: false
      batchesUri:
        _description: 'A URI at which at which the array of test execution
          batches can be fetched. The format of the document at this
          URI SHALL be on the format prescribed by __data.batches__
          (i.e. ``` [ { "name": "Batch 1", ...}, {...}] ```). Each
          event SHALL include one and only one of __data.batches__
          and __data.batchesUri__.'
        type: string
      batches:
        _description: A list of batches of recipes. Each event SHALL
          include one and only one of __data.batches__ and __data.batchesUri__.
          In the interest of keeping message sizes small, it is recommended
          to use __data.batches__ only for limited numbers of test
          cases (on the order of ten executions). For larger numbers
          of executions, __data.batchesUri__ SHOULD be used instead.
        type: array
        items:
          type: object
          properties:
            name:
              _description: The name of the recipe batch.
              type: string
            priority:
              _description: The execution priority of the batch, as
                compared to other batches in the collection. A lower
                value SHALL be interpreted as a higher priority.
              type: integer
            recipes:
              _description: The collection of test execution recipes
                within the batch.
              type: array
              items:
                type: object
                properties:
                  id:
                    _description: A UUID identifying the unique execution.
                      Note that this is different from the id of a
                      test case, in two ways. First, a test case is
                      a (presumably) persistent entity, whereas an
                      execution is transient in nature. Second, a test
                      case may be executed any number of times in any
                      given recipe collection.
                    type: string
                    pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  testCase:
                    _description: The test case to be executed in this
                      execution recipe.
                    type: object
                    properties:
                      tracker:
                        _description: The name of the test case tracker
                          - typically a test management system.
                        type: string
                      id:
                        _description: The unique identity of the test
                          case to be executed.
                        type: string
                      version:
                        _description: The unique version of the identified
                          test case to be executed. Where this property
                          is not used it is assumed that test cases
                          are not version controlled.
                        type: string
                      uri:
                        _description: A location where a description
                          of the test case can be retrieved. To the
                          extent that multiple versions of the same
                          test case co-exist, this property SHALL identify
                          the exact version to be executed.
                        type: string
                    required:
                      - id
                    additionalProperties: false
                  constraints:
                    _description: 'Any constraints of the execution.
                      The nature of such constraints is highly dependent
                      on technology domain and test execution framework.
                      Consequently, there are no pre-defined or required
                      constraints. Instead, this property is a list
                      of key-value pairs on the same format as [data.customData](../customization/custom-data.md).
                      That being said, there are three questions that
                      typically need to be answered: what is the item
                      under test, in what kind of environment is it
                      to be tested, and what are the test parameters?'
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          _description: The key name of constraint.
                          type: string
                        value:
                          _description: The value of the constraint.
                      required:
                        - key
                        - value
                      additionalProperties: false
                required:
                  - id
                  - testCase
                additionalProperties: false
            dependencies:
              _description: A list of test case execution dependencies.
                Ideally, test cases are atomic and can be executed
                in isolation. In cases where a test case assumes that
                another test case has been executed previously in the
                same environment, however, this property can be used
                to specify that. It serves as an instruction to the
                test executor to place two executions subsequent to
                one another in the same environment.
              type: array
              items:
                type: object
                properties:
                  dependent:
                    _description: The UUID of the dependent execution
                      (__data.batches.recipes.id__), i.e. the execution
                      that shall be performed only after that of the
                      dependency.
                    type: string
                  dependency:
                    _description: The UUID of the dependency execution
                      (__data.batches.recipes.id__), i.e. the execution
                      that shall be performed prior to that of the
                      dependent.
                    type: string
                required:
                  - dependent
                  - dependency
                additionalProperties: false
          required:
            - priority
            - recipes
          additionalProperties: false
      customData:
        type: array
        items:
          $ref: ../EiffelCustomDataProperty/1.0.0.yml
    required:
      - selectionStrategy
    additionalProperties: false
  links:
    type: array
    items:
      $ref: ../EiffelEventLink/1.1.1.yml
required:
  - meta
  - data
  - links
additionalProperties: false
_links:
  CAUSE:
    description: 'Identifies a cause of the event occurring. SHOULD
      not be used in conjunction with __CONTEXT__: individual events
      providing __CAUSE__ within a larger context gives rise to ambiguity.
      It is instead recommended to let the root event of the context
      declare __CAUSE__.'
    required: false
    multiple: true
    targets:
      any_type: true
      types: []
  CONTEXT:
    description: Identifies the activity or test suite of which this
      event constitutes a part.
    required: false
    multiple: false
    targets:
      any_type: false
      types:
        - EiffelActivityTriggeredEvent
        - EiffelTestSuiteStartedEvent
  FLOW_CONTEXT:
    description: 'Identifies the flow context of the event: which is
      the continuous integration and delivery flow in which this occurred
      – e.g. which product, project, track or version this is applicable
      to.'
    required: false
    multiple: true
    targets:
      any_type: false
      types:
        - EiffelFlowContextDefinedEvent
_history:
  - version: 4.2.0
    introduced_in: edition-arica
    changes: Add missing testCase.version member (see [Issue 288](https://github.com/eiffel-community/eiffel/issues/288)).
  - version: 4.1.1
    introduced_in: edition-lyon
    changes: Add missing validation pattern to links.target member
      (see [Issue 271](https://github.com/eiffel-community/eiffel/issues/271)).
  - version: 4.1.0
    introduced_in: edition-lyon
    changes: Add links.domainId member (see [Issue 233](https://github.com/eiffel-community/eiffel/issues/233)).
  - version: 4.0.0
    introduced_in: edition-agen
    changes: Improved information integrity protection (see [Issue
      185](https://github.com/eiffel-community/eiffel/issues/185)).
  - version: 3.0.0
    introduced_in: edition-agen
    changes: Introduced purl identifiers instead of GAVs (see [Issue
      182](https://github.com/eiffel-community/eiffel/issues/182))
  - version: 2.1.0
    introduced_in: edition-toulouse
    changes: Multiple links of type FLOW_CONTEXT allowed.
  - version: 2.0.0
    introduced_in: edition-toulouse
    changes: Changed syntax of data.batches.recipes.constraints from
      an uncontrolled object to a list of key-value pairs to comply
      with design guidelines.
  - version: 1.0.0
    introduced_in: edition-bordeaux
    changes: Initial version.
_examples:
  - title: Example using data.batches
    url: ../examples/events/EiffelTestExecutionRecipeCollectionCreatedEvent/batches.json
  - title: Example using data.batches (1.0.0 syntax)
    url: ../examples/events/EiffelTestExecutionRecipeCollectionCreatedEvent/batches-1.0.0.json
  - title: Example using data.batchesUri
    url: ../examples/events/EiffelTestExecutionRecipeCollectionCreatedEvent/batchesUri.json
